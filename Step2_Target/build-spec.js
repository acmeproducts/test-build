// This build-spec file is the definitive, machine-readable master plan for the Step 2 Architectural Refactor.
// It is the tangible output of the DOCUMENTATION phase and the primary input for the EXECUTION phase.
// It was generated by translating the findings from the `analysis-report.txt`.

const BuildSpec = {
    // =================================================================================================
    // == HIGH-LEVEL STRATEGY & PHILOSOPHY
    // =================================================================================================
    strategy: {
        architecture: "View-Based Architecture",
        description: "The primary organizational principle is to structure the code around the application's user-facing views. This provides a direct, intuitive mapping from the UI to the codebase, enhancing maintainability and developer velocity.",
        methodology: [
            "1. Structure by View First: Each distinct view or major UI component will be encapsulated in its own module. This module will be responsible for its own DOM elements, event listeners, and rendering logic.",
            "2. Second Pass for Consolidation: After the views are defined, common, reusable logic will be extracted into a `core/` layer of services and utilities. This prevents premature abstraction and ensures that shared modules are created based on real, identified needs.",
            "3. Multi-Phase Project Flow: This refactor (Step 2) is focused SOLELY on architectural integrity. A subsequent Optimization phase (Step 4) will address performance enhancements and DRY principle violations."
        ],
        communication: "All cross-module communication MUST be decoupled via a Publish/Subscribe (Pub/Sub) event bus. No View or Service should have a direct reference to another, except for the main App Orchestrator."
    },

    // =================================================================================================
    // == PHYSICAL SCAFFOLDING
    // =================================================================================================
    // This section defines the exact physical file structure for the Step 2 Target.
    // It will be used by the creation script to generate the empty file structure.
    scaffolding: {
        "css/": {},
        "html/": {
            "modals/": {},
            "screens/": {}
        },
        "js/": {
            "core/": {
                "providers/": {},
                "services/": {}
            },
            "views/": {}
        }
    },

    // =================================================================================================
    // == GOLDEN THREAD MAP & API CONTRACTS
    // =================================================================================================
    // This is the core of the build spec. Each key represents a target file to be created.
    // - `sources`: An array of `Step1_Source` files where the original logic lives.
    // - `logic_blocks`: A human-readable list of the key functions/responsibilities to be moved.
    // - `api_contract`: The explicit definition of how this module interacts with the rest of the application.
    modules: {

        // ---------------------------------------------------------------------------------------------
        // -- CORE LAYER
        // ---------------------------------------------------------------------------------------------

        "js/core/PubSub.js": {
            sources: ["new"],
            logic_blocks: [
                "Create a lightweight Pub/Sub event bus with `subscribe`, `publish`, and `unsubscribe` methods."
            ],
            api_contract: {
                description: "The central nervous system of the application. It is instantiated once and passed to all modules that need to communicate.",
                methods: ["subscribe(eventName, callback)", "unsubscribe(eventName, callback)", "publish(eventName, payload)"]
            }
        },
        "js/core/State.js": {
            sources: ["js/app/state.js", "js/app/core.js", "js/app/app.js"],
            logic_blocks: [
                "Encapsulate the global `state` object.",
                "Port all direct state mutation logic (e.g., `moveToStack`, `initializeStacks`).",
                "Create public methods for all state changes (e.g., `selectFolder`, `deleteFiles`, `updateMetadata`)."
            ],
            api_contract: {
                description: "The single source of truth for all application data. It listens for action requests from views and publishes a generic `state:updated` event after any mutation, ensuring all views can react and re-render.",
                subscribes: [
                    "centerStage:image-flicked",
                    "centerStage:stack-selected",
                    "grid:reordered",
                    "grid:bulk-move-requested",
                    "grid:bulk-delete-requested",
                    "grid:bulk-tag-requested",
                    "details:metadata-updated",
                    "centerStage:focus-delete-requested"
                ],
                publishes: ["state:updated"]
            }
        },
        "js/core/Utils.js": {
            sources: ["js/utils/utils.js"],
            logic_blocks: [
                "Port all stateless helper functions (`formatFileSize`, `setImageSrc`, `getPreferredImageUrl`).",
                "Create `qs` and `qsa` helpers.",
                "Port `showToast` and refactor it to publish a haptic event instead of calling the service directly.",
                "DEPRECATE and REMOVE the entire stateful `elements: {}` object and its `init()` method."
            ],
            api_contract: {
                description: "A stateless library of common helper functions, injected with the PubSub bus for decoupling services like haptics."
            }
        },
        "js/core/providers/googledrive-provider.js": {
            sources: ["js/providers/googledrive-provider.js"],
            logic_blocks: ["Port the entire class. Refactor to remove any reliance on global state by accepting state information via method parameters."],
            api_contract: { description: "Handles all direct API communication with Google Drive." }
        },
        "js/core/providers/onedrive-provider.js": {
            sources: ["js/providers/onedrive-provider.js"],
            logic_blocks: ["Port the entire class. Refactor to remove any reliance on global state by accepting state information via method parameters."],
            api_contract: { description: "Handles all direct API communication with Microsoft Graph." }
        },
        "js/core/services/metadata.js": {
            sources: ["js/services/metadata.js"],
            logic_blocks: ["Port the `MetadataExtractor` class. Refactor `fetchMetadata` to accept the active provider instance as an argument instead of reading from global state."],
            api_contract: { description: "Service for extracting embedded `tEXt` metadata from PNG files." }
        },
        // ... (Other services are direct ports and are omitted for brevity, but would be included here) ...

        // ---------------------------------------------------------------------------------------------
        // -- VIEW LAYER
        // ---------------------------------------------------------------------------------------------

        "js/views/SetupView.js": {
            sources: ["js/app/app.js", "js/app/events.js", "js/components/gdrive-folders.js", "js/components/onedrive-folders.js"],
            logic_blocks: [
                "Consolidate all logic for the multi-screen setup flow.",
                "Bind event listeners for provider selection, auth buttons, back buttons, and folder selection.",
                "Manage the visibility and state of all setup-related screens.",
                "Handle the image loading process and progress bar."
            ],
            api_contract: {
                description: "Manages the entire user onboarding flow, from start to the moment the main app is ready.",
                publishes: [
                    "setup:provider-selected",
                    "setup:auth-requested",
                    "setup:folder-selected",
                    "setup:load-images-complete",
                    "setup:cancelled",
                    "app:logout"
                ]
            }
        },
        "js/views/CenterStageView.js": {
            sources: ["js/app/core.js", "js/components/ui.js", "js/components/gestures.js", "js/app/events.js"],
            logic_blocks: [
                "Consolidate all logic for the main triage screen.",
                "Handle rendering the main image, pill counters, filename, and image counts.",
                "Encapsulate all gesture logic (swipe, flick, pinch-zoom, double-tap).",
                "Encapsulate Focus Mode logic (enter/exit, nav, delete).",
                "Bind all listeners for its UI elements (pills, nav buttons, etc.)."
            ],
            api_contract: {
                description: "Manages the core image triage screen, its two sub-modes (Normal and Focus), and all related user interactions.",
                subscribes: ["state:updated"],
                publishes: [
                    "centerStage:image-flicked",
                    "centerStage:stack-selected",
                    "centerStage:grid-requested",
                    "centerStage:details-requested",
                    "centerStage:focus-toggled",
                    "centerStage:focus-delete-requested",
                    "centerStage:focus-stack-switch-requested",
                    "centerStage:return-to-folders"
                ]
            }
        },
        "js/views/GridView.js": {
            sources: ["js/components/grid.js", "js/app/events.js"],
            logic_blocks: [
                "Encapsulate all logic for the grid modal.",
                "Handle lazy-loading and rendering of grid items.",
                "Manage selection state (`selected` array).",
                "Handle search/filter logic.",
                "Bind all listeners for its UI elements (bulk buttons, close, select all, etc.)."
            ],
            api_contract: {
                description: "Manages the grid modal for bulk image operations.",
                subscribes: [
                    "app:open-grid-view", // Sent from Orchestrator
                    "state:updated"
                ],
                publishes: [
                    "grid:closed-with-selection", // The critical reordering feature
                    "grid:bulk-tag-action",
                    "grid:bulk-move-action",
                    "grid:bulk-delete-action",
                    "grid:bulk-export-action",
                    "grid:bulk-folder-move-action"
                ]
            }
        },
        "js/views/DetailsView.js": {
            sources: ["js/components/details.js", "js/app/events.js"],
            logic_blocks: [
                "Encapsulate all logic for the details modal.",
                "Handle rendering all four tabs (Info, Tags, Notes, Metadata).",
                "Handle user input for tags, notes, and star ratings.",
                "Bind all listeners for its UI elements (tabs, inputs, remove tag buttons, etc.)."
            ],
            api_contract: {
                description: "Manages the details modal for inspecting and editing a single image's metadata.",
                subscribes: [
                    "app:open-details-view", // Sent from Orchestrator
                    "state:updated"
                ],
                publishes: [
                    "details:metadata-updated",
                    "details:closed"
                ]
            }
        },
        "js/views/ActionView.js": {
            sources: ["js/components/modal.js", "js/app/events.js"],
            logic_blocks: [
                "Encapsulate the logic for the generic, reusable confirmation modal.",
                "Render content dynamically based on the event payload it receives.",
                "Bind listeners to its own Confirm/Cancel buttons."
            ],
            api_contract: {
                description: "A 'dumb' component that displays a confirmation prompt for actions initiated by other views.",
                subscribes: [
                    "grid:bulk-delete-action", // Listens for any action that needs confirmation
                    "grid:bulk-export-action",
                    "grid:bulk-folder-move-action",
                    "centerStage:focus-stack-switch-requested"
                ],
                publishes: [
                    "action:confirmed", // Publishes a generic confirmation, passing back the original action context
                    "action:cancelled"
                ]
            }
        },

        // ---------------------------------------------------------------------------------------------
        // -- APP ORCHESTRATOR
        // ---------------------------------------------------------------------------------------------
        "js/main.js": {
            sources: ["js/main.js", "js/app/app.js"],
            logic_blocks: [
                "The main application entry point (`initApp`).",
                "Instantiate all core services (PubSub, State, Utils, Providers, etc.).",
                "Instantiate all Views, injecting their dependencies (e.g., the PubSub instance).",
                "Wire up the application by subscribing to events from Views and calling methods on the State store or other Views. This is the only module that holds direct references to other modules."
            ],
            api_contract: {
                description: "The App Orchestrator. It initializes all modules and acts as the central hub, wiring up the event-driven system by subscribing to view events and dispatching actions to the appropriate core modules."
            }
        }
    }
};
