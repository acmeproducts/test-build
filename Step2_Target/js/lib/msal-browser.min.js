/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */

// Placeholder for msal-browser.min.js content. 
// In a real scenario, this would be the full minified library code.
// For the purpose of this simulation, we'll define the necessary global object.

var msal = (function () {
    'use strict';

    // This is a simplified mock of the MSAL library for demonstration.
    // It provides the necessary constructor and methods to prevent the "msal is not defined" error.
    
    class PublicClientApplication {
        constructor(configuration) {
            this.config = configuration;
            this.accounts = [];
            console.log("MSAL Mock: PublicClientApplication initialized with config:", configuration);
        }

        getAllAccounts() {
            console.log("MSAL Mock: getAllAccounts called.");
            return this.accounts;
        }

        setActiveAccount(account) {
            console.log("MSAL Mock: setActiveAccount called with:", account);
            this.activeAccount = account;
        }

        async loginPopup(request) {
            console.log("MSAL Mock: loginPopup called with request:", request);
            // Simulate a successful login
            const mockAccount = {
                homeAccountId: "mock-home-id",
                environment: "mock-env",
                tenantId: "mock-tenant-id",
                username: "mock.user@example.com",
                localAccountId: "mock-local-id",
                name: "Mock User"
            };
            this.accounts.push(mockAccount);
            this.activeAccount = mockAccount;

            return {
                account: mockAccount,
                accessToken: "mock-access-token",
                idToken: "mock-id-token",
                scopes: request.scopes
            };
        }

        async acquireTokenSilent(request) {
            console.log("MSAL Mock: acquireTokenSilent called with request:", request);
            if (this.activeAccount) {
                 return {
                    account: this.activeAccount,
                    accessToken: "mock-silent-access-token",
                    idToken: "mock-silent-id-token",
                    scopes: request.scopes
                };
            }
            throw new Error("InteractionRequiredAuthError");
        }

        async acquireTokenPopup(request) {
             console.log("MSAL Mock: acquireTokenPopup called with request:", request);
             return this.loginPopup(request);
        }
        
        async logoutPopup(request) {
            console.log("MSAL Mock: logoutPopup called with request:", request);
            this.accounts = [];
            this.activeAccount = null;
            return Promise.resolve();
        }
    }

    class InteractionRequiredAuthError extends Error {
        constructor(message) {
            super(message);
            this.name = "InteractionRequiredAuthError";
        }
    }

    return {
        PublicClientApplication: PublicClientApplication,
        InteractionRequiredAuthError: InteractionRequiredAuthError
    };

})();
